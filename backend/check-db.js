import pkg from 'pg';
const { Pool } = pkg;

// –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const configs = [
  {
    name: 'Default PostgreSQL',
    user: 'postgres',
    host: 'localhost',
    database: 'postgres',
    password: '', // –ø–æ–ø—Ä–æ–±—É–µ–º –ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
    port: 5432,
  },
  {
    name: 'Food Accounting DB', 
    user: 'postgres',
    host: 'localhost',
    database: 'food-accounting-db',
    password: '',
    port: 5432,
  }
];

async function testConnection(config) {
  const pool = new Pool(config);
  
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${config.name}...`);
    const result = await pool.query('SELECT current_database(), version()');
    console.log(`‚úÖ –£—Å–ø–µ—Ö! –ë–∞–∑–∞: ${result.rows[0].current_database}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—ã
    const tables = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `);
    console.log(`üìä –¢–∞–±–ª–∏—Ü—ã: ${tables.rows.map(row => row.table_name).join(', ') || '–Ω–µ—Ç —Ç–∞–±–ª–∏—Ü'}`);
    
    return true;
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  } finally {
    await pool.end();
  }
}

async function main() {
  console.log('='.repeat(50));
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL');
  console.log('='.repeat(50));
  
  for (const config of configs) {
    await testConnection(config);
    console.log('---');
  }
}

main();