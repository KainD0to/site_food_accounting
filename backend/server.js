import express from 'express';
import pkg from 'pg';
import cors from 'cors';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import 'dotenv/config';

const { Pool } = pkg;
const app = express();

// Middleware
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true
}));
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || `postgresql://${process.env.DB_USER}:${process.env.DB_PASSWORD}@${process.env.DB_HOST}:${process.env.DB_PORT}/${process.env.DB_NAME}`,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
const checkDatabaseConnection = async () => {
  try {
    await pool.query('SELECT 1');
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const result = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `);
    console.log('üìä –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ:', result.rows.map(row => row.table_name));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error);
  }
};

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/health', async (req, res) => {
  try {
    await pool.query('SELECT 1');
    res.json({ 
      status: 'OK', 
      database: 'connected',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'Error', 
      database: 'disconnected',
      error: error.message 
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
app.get('/api/students', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM students ORDER BY created_at DESC');
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –°–æ–∑–¥–∞—Ç—å —É—á–µ–Ω–∏–∫–∞
app.post('/api/students', async (req, res) => {
  try {
    const { student_code, full_name, class: studentClass, phone } = req.body;
    
    const result = await pool.query(
      'INSERT INTO students (student_code, full_name, class, phone) VALUES ($1, $2, $3, $4) RETURNING *',
      [student_code, full_name, studentClass, phone]
    );
    
    res.json({ message: '–£—á–µ–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω', student: result.rows[0] });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
app.get('/api/parents', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM parents ORDER BY created_at DESC');
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∏ —Ä–æ–¥–∏—Ç–µ–ª—å-—É—á–µ–Ω–∏–∫
app.get('/api/parent-student', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT ps.*, p.full_name as parent_name, s.full_name as student_name
      FROM parent_student ps
      JOIN parents p ON ps.parent_id = p.id
      JOIN students s ON ps.student_id = s.id
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
app.post('/api/auth/admin/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    
    const result = await pool.query('SELECT * FROM admins WHERE username = $1', [username]);
    if (result.rows.length === 0) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    const admin = result.rows[0];
    const isValidPassword = await bcrypt.compare(password, admin.password_hash);
    
    if (!isValidPassword) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    const token = jwt.sign(
      { userId: admin.id, userType: 'admin' }, 
      process.env.JWT_SECRET || 'fallback-secret',
      { expiresIn: '24h' }
    );

    res.json({ 
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', 
      token,
      user: { id: admin.id, username: admin.username, full_name: admin.full_name }
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìç Environment: ${process.env.NODE_ENV || 'development'}`);
  
  // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –Ω–µ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
  await checkDatabaseConnection();
});