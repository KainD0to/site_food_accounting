import express from 'express';
import pkg from 'pg';
import cors from 'cors';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

const { Pool } = pkg;
const app = express();

app.use(cors());
app.use(express.json());

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
console.log('üîê –ó–∞–≥—Ä—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å –∏–∑ .env:', process.env.DB_PASSWORD ? '***' + process.env.DB_PASSWORD.slice(-2) : '–ù–ï –ó–ê–ì–†–£–ñ–ï–ù');
console.log('üìÅ DATABASE_URL:', process.env.DATABASE_URL ? '–∑–∞–≥—Ä—É–∂–µ–Ω' : '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ .env
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'food-accounting-db',
  password: process.env.DB_PASSWORD, // –∏–∑ .env —Ñ–∞–π–ª–∞
  port: 5432,
});

// –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
// const pool = new Pool({
//   connectionString: process.env.DATABASE_URL,
// });

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
pool.on('connect', () => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ PostgreSQL:', err);
});

// Health check
app.get('/api/health', async (req, res) => {
  try {
    await pool.query('SELECT 1');
    res.json({ 
      status: 'OK', 
      database: 'connected',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Health check error:', error.message);
    res.status(500).json({ 
      status: 'Error', 
      database: 'disconnected',
      error: error.message 
    });
  }
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
app.post('/api/admin/login', async (req, res) => {
  try {
    const { full_name, password } = req.body;
    console.log('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∞:', full_name);

    const result = await pool.query(
      'SELECT * FROM admin WHERE full_name = $1',
      [full_name]
    );

    if (result.rows.length === 0) {
      return res.status(401).json({ error: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const admin = result.rows[0];
    
    if (password !== admin.password) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    const token = 'admin-token-' + admin.id;

    res.json({
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
      token,
      user: {
        id: admin.id,
        full_name: admin.full_name,
        role: 'admin'
      }
    });
  } catch (error) {
    console.error('Admin login error:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è
app.post('/api/parent/login', async (req, res) => {
  try {
    const { full_name, password } = req.body;
    console.log('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Ä–æ–¥–∏—Ç–µ–ª—è:', full_name);

    const result = await pool.query(
      'SELECT * FROM parents WHERE full_name = $1',
      [full_name]
    );

    if (result.rows.length === 0) {
      return res.status(401).json({ error: '–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const parent = result.rows[0];
    
    if (password !== parent.password) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    const token = 'parent-token-' + parent.id;

    res.json({
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
      token,
      user: {
        id: parent.id,
        full_name: parent.full_name,
        role: 'parent'
      }
    });
  } catch (error) {
    console.error('Parent login error:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/api/students', async (req, res) => {
  try {
    const token = req.headers.authorization;
    console.log('üîê Token –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', token);
    
    if (!token || !token.includes('admin-token')) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    console.log('üìã –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...');
    
    const result = await pool.query(`
      SELECT s.*, p.full_name as parent_name,
      (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE student_id = s.id) as balance
      FROM students s 
      LEFT JOIN parents p ON s.parent_id = p.id 
      ORDER BY s.full_name
    `);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${result.rows.length}`);
    console.log('üìä –°—Ç—É–¥–µ–Ω—Ç—ã:', result.rows);
    
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è
app.get('/api/parent/students', async (req, res) => {
  try {
    const token = req.headers.authorization;
    console.log('üîê Token –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è:', token);
    
    if (!token || !token.includes('parent-token')) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º parent_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ (parent-token-1 ‚Üí 1)
    const parentId = parseInt(token.split('-').pop());
    console.log(`üë®‚Äçüë¶ –ó–∞–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è ID: ${parentId}`);
    
    const result = await pool.query(`
      SELECT s.*,
      (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE student_id = s.id) as balance
      FROM students s 
      WHERE s.parent_id = $1
      ORDER BY s.full_name
    `, [parentId]);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É —Ä–æ–¥–∏—Ç–µ–ª—è: ${result.rows.length}`);
    console.log('üìä –°—Ç—É–¥–µ–Ω—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è:', result.rows);
    
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
app.get('/api/students/:id/payments', async (req, res) => {
  try {
    const studentId = req.params.id;
    const token = req.headers.authorization;
    
    console.log(`üí∞ –ó–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–µ–∂–µ–π —Å—Ç—É–¥–µ–Ω—Ç–∞ ID: ${studentId}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
    if (token && token.includes('parent-token')) {
      const parentId = parseInt(token.split('-').pop());
      const studentCheck = await pool.query(
        'SELECT * FROM students WHERE id = $1 AND parent_id = $2',
        [studentId, parentId]
      );
      
      if (studentCheck.rows.length === 0) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
      }
    }

    const result = await pool.query(
      'SELECT * FROM payments WHERE student_id = $1 ORDER BY payment_date DESC, created_at DESC',
      [studentId]
    );

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${result.rows.length}`);
    
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    res.status(500).json({ error: error.message });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
app.post('/api/payments', async (req, res) => {
  try {
    const token = req.headers.authorization;
    
    if (!token || !token.includes('admin-token')) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const { student_id, payment_date, amount, description } = req.body;
    
    console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', { student_id, amount, description });

    const result = await pool.query(
      `INSERT INTO payments (student_id, payment_date, amount, description, created_by) 
       VALUES ($1, $2, $3, $4, $5) RETURNING *`,
      [student_id, payment_date, amount, description, 1] // created_by = 1 (–∞–¥–º–∏–Ω)
    );

    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω:', result.rows[0]);
    
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

const PORT = 5000;
app.listen(PORT, () => {
  console.log('='.repeat(50));
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîê –ü–∞—Ä–æ–ª—å –∏–∑ .env: ${process.env.DB_PASSWORD ? '***' + process.env.DB_PASSWORD.slice(-2) : '–ù–ï –ó–ê–ì–†–£–ñ–ï–ù'}`);
  console.log('='.repeat(50));
});