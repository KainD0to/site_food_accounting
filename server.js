import express from 'express';
import pkg from 'pg';
import cors from 'cors';
//–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞—â–∏—Ç—ã
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';

const { Pool } = pkg;
const app = express(); // ‚Üê –ü–ï–†–ï–ù–ï–°–ò –°–Æ–î–ê!

// ==================== MIDDLEWARE ====================

// –ó–∞—â–∏—Ç–∞ headers
app.use(helmet());

// –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100 // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
});
app.use(limiter);

// CORS —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
app.use(cors({
  origin: [
    'https://site-food-accounting-frontend.onrender.com',
    'http://localhost:3000'
  ],
  credentials: true
}));

app.use(express.json());

// ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üîê DB_HOST:', process.env.DB_HOST);
console.log('üåê NODE_ENV:', process.env.NODE_ENV);
console.log('üîó FRONTEND_URL:', process.env.FRONTEND_URL);
console.log('üîó DATABASE_URL:', process.env.DATABASE_URL ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
let poolConfig;

if (process.env.DATABASE_URL) {
  // –î–ª—è Render —Å DATABASE_URL
  poolConfig = {
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  };
  console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL –æ—Ç Render');
} else if (process.env.DB_HOST) {
  // –î–ª—è Render —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  poolConfig = {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT || 5432,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
  };
  console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î');
} else {
  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  poolConfig = {
    user: 'postgres',
    host: 'localhost',
    database: 'food-accounting-db', 
    password: process.env.DB_PASSWORD,
    port: 5432,
  };
  console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î');
}

const pool = new Pool(poolConfig);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
pool.on('connect', () => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ PostgreSQL:', err);
});

// ==================== ROUTES ====================

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –£–ë–ï–î–ò–¢–ï–°–¨ –ß–¢–û –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢
app.get('/', (req, res) => {
  res.json({ 
    message: '‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    endpoints: {
      health: '/api/health',
      test: '/api/test',
      admin_login: 'POST /api/admin/login'
    },
    timestamp: new Date().toISOString()
  });
});

// Health check
app.get('/api/health', async (req, res) => {
  try {
    await pool.query('SELECT 1');
    res.json({ 
      status: 'OK', 
      database: 'connected',
      environment: process.env.NODE_ENV,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Health check error:', error.message);
    res.status(500).json({ 
      status: 'Error', 
      database: 'disconnected',
      error: error.message,
      environment: process.env.NODE_ENV
    });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/api/test', (req, res) => {
  res.json({
    message: 'Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    environment: process.env.NODE_ENV,
    timestamp: new Date().toISOString()
  });
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
app.post('/api/admin/login', async (req, res) => {
  console.log('üîë ========== –ü–û–ü–´–¢–ö–ê –í–•–û–î–ê –ê–î–ú–ò–ù–ê ==========');
  
  try {
    console.log('üì® –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
    
    const { full_name, password } = req.body;
    
    if (!full_name || !password) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    console.log(`üîê –í—Ö–æ–¥: ${full_name}, –ü–∞—Ä–æ–ª—å: ${password ? '***' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

    // –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (full_name === '–¢–µ—Å—Ç –∞–¥–º–∏–Ω' && password === '1357911Dan') {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)');
      return res.json({
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
        token: 'admin-token-1',
        user: {
          id: 1,
          full_name: '–¢–µ—Å—Ç –∞–¥–º–∏–Ω',
          role: 'admin'
        }
      });
    }

    // –ü—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (pool) {
      console.log('üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const result = await pool.query(
        'SELECT * FROM admin WHERE full_name = $1',
        [full_name]
      );

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.rows.length}`);

      if (result.rows.length > 0) {
        const admin = result.rows[0];
        console.log('üë§ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:', admin);
        
        if (password === admin.password) {
          console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π');
          return res.json({
            message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
            token: 'admin-token-' + admin.id,
            user: {
              id: admin.id,
              full_name: admin.full_name,
              role: 'admin'
            }
          });
        } else {
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        }
      } else {
        console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } else {
      console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    });
  }
});

// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
app.post('/api/parent/login', async (req, res) => {
  console.log('üîë ========== –ü–û–ü–´–¢–ö–ê –í–•–û–î–ê –†–û–î–ò–¢–ï–õ–Ø ==========');
  
  try {
    console.log('üì® –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
    
    const { full_name, password } = req.body;
    
    if (!full_name || !password) {
      return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    console.log(`üîê –í—Ö–æ–¥: ${full_name}`);

    // –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú
    if (full_name === '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á' && password === '123') {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)');
      return res.json({
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
        token: 'parent-token-1',
        user: {
          id: 1,
          full_name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
          role: 'parent'
        }
      });
    }

    if (pool) {
      console.log('üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const result = await pool.query(
        'SELECT * FROM parents WHERE full_name = $1',
        [full_name]
      );

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.rows.length}`);

      if (result.rows.length > 0) {
        const parent = result.rows[0];
        
        if (password === parent.password) {
          return res.json({
            message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
            token: 'parent-token-' + parent.id,
            user: {
              id: parent.id,
              full_name: parent.full_name,
              role: 'parent'
            }
          });
        }
      }
    }

    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/api/students', async (req, res) => {
  try {
    const token = req.headers.authorization;
    console.log('üîê Token –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', token);
    
    if (!token || !token.includes('admin-token')) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    console.log('üìã –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...');
    
    const result = await pool.query(`
      SELECT s.*, p.full_name as parent_name,
      (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE student_id = s.id) as balance
      FROM students s 
      LEFT JOIN parents p ON s.parent_id = p.id 
      ORDER BY s.full_name
    `);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${result.rows.length}`);
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è
app.get('/api/parent/students', async (req, res) => {
  try {
    const token = req.headers.authorization;
    console.log('üîê Token –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è:', token);
    
    if (!token || !token.includes('parent-token')) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º parent_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ (parent-token-1 ‚Üí 1)
    const parentId = parseInt(token.split('-').pop());
    console.log(`üë®‚Äçüë¶ –ó–∞–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è ID: ${parentId}`);
    
    const result = await pool.query(`
      SELECT s.*,
      (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE student_id = s.id) as balance
      FROM students s 
      WHERE s.parent_id = $1
      ORDER BY s.full_name
    `, [parentId]);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É —Ä–æ–¥–∏—Ç–µ–ª—è: ${result.rows.length}`);
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
app.get('/api/students/:id/payments', async (req, res) => {
  try {
    const studentId = req.params.id;
    const token = req.headers.authorization;
    
    console.log(`üí∞ –ó–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–µ–∂–µ–π —Å—Ç—É–¥–µ–Ω—Ç–∞ ID: ${studentId}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
    if (token && token.includes('parent-token')) {
      const parentId = parseInt(token.split('-').pop());
      const studentCheck = await pool.query(
        'SELECT * FROM students WHERE id = $1 AND parent_id = $2',
        [studentId, parentId]
      );
      
      if (studentCheck.rows.length === 0) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
      }
    }

    const result = await pool.query(
      'SELECT * FROM payments WHERE student_id = $1 ORDER BY payment_date DESC, created_at DESC',
      [studentId]
    );

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${result.rows.length}`);
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    res.status(500).json({ error: error.message });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
app.post('/api/payments', async (req, res) => {
  try {
    const token = req.headers.authorization;
    
    if (!token || !token.includes('admin-token')) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const { student_id, payment_date, amount, description } = req.body;
    
    console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', { student_id, amount, description });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º admin_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ (admin-token-1 ‚Üí 1)
    const adminId = parseInt(token.split('-').pop());

    const result = await pool.query(
      `INSERT INTO payments (student_id, payment_date, amount, description, created_by) 
       VALUES ($1, $2, $3, $4, $5) RETURNING *`,
      [student_id, payment_date, amount, description, adminId]
    );

    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω:', result.rows[0]);
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
app.get('/api/students/:id/balance', async (req, res) => {
  try {
    const studentId = req.params.id;
    const token = req.headers.authorization;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
    if (token && token.includes('parent-token')) {
      const parentId = parseInt(token.split('-').pop());
      const studentCheck = await pool.query(
        'SELECT * FROM students WHERE id = $1 AND parent_id = $2',
        [studentId, parentId]
      );
      
      if (studentCheck.rows.length === 0) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
      }
    }

    const result = await pool.query(
      'SELECT public.get_student_balance($1, CURRENT_DATE) as balance',
      [studentId]
    );

    res.json({ balance: parseFloat(result.rows[0].balance) });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
app.get('/api/debug/check-db', async (req, res) => {
  try {
    const adminCount = await pool.query('SELECT COUNT(*) FROM admin');
    const parentsCount = await pool.query('SELECT COUNT(*) FROM parents');
    const studentsCount = await pool.query('SELECT COUNT(*) FROM students');
    const paymentsCount = await pool.query('SELECT COUNT(*) FROM payments');
    
    res.json({
      admin: parseInt(adminCount.rows[0].count),
      parents: parseInt(parentsCount.rows[0].count),
      students: parseInt(studentsCount.rows[0].count),
      payments: parseInt(paymentsCount.rows[0].count)
    });
  } catch (error) {
    res.json({ error: error.message });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log('='.repeat(50));
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üîó DATABASE_URL: ${process.env.DATABASE_URL ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
  console.log('='.repeat(50));
  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
  console.log('   –ê–¥–º–∏–Ω: –¢–µ—Å—Ç –∞–¥–º–∏–Ω / 1357911Dan');
  console.log('   –†–æ–¥–∏—Ç–µ–ª—å: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á / 123');
  console.log('='.repeat(50));
});