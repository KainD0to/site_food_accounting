import express from 'express';
import pkg from 'pg';
import cors from 'cors';
//–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞—â–∏—Ç—ã
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';

const { Pool } = pkg;
const app = express(); // ‚Üê –ü–ï–†–ï–ù–ï–°–ò –°–Æ–î–ê!

// ==================== MIDDLEWARE ====================

// –ó–∞—â–∏—Ç–∞ headers
app.use(helmet());

// –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100 // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
});
app.use(limiter);

// CORS —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
app.use(cors({
  origin: [
    'https://site-food-accounting-frontend.onrender.com',
    'http://localhost:3000'
  ],
  credentials: true
}));

app.use(express.json());

// ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üîê DB_HOST:', process.env.DB_HOST);
console.log('üåê NODE_ENV:', process.env.NODE_ENV);
console.log('üîó FRONTEND_URL:', process.env.FRONTEND_URL);
console.log('üîó DATABASE_URL:', process.env.DATABASE_URL ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
let poolConfig;

if (process.env.DATABASE_URL) {
  // –î–ª—è Render —Å DATABASE_URL
  poolConfig = {
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  };
  console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL –æ—Ç Render');
} else if (process.env.DB_HOST) {
  // –î–ª—è Render —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  poolConfig = {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT || 5432,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
  };
  console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î');
} else {
  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  poolConfig = {
    user: 'postgres',
    host: 'localhost',
    database: 'food-accounting-db', 
    password: process.env.DB_PASSWORD,
    port: 5432,
  };
  console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î');
}

const pool = new Pool(poolConfig);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
pool.on('connect', () => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ PostgreSQL:', err);
});

// ==================== ROUTES ====================

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –£–ë–ï–î–ò–¢–ï–°–¨ –ß–¢–û –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢
app.get('/', (req, res) => {
  res.json({ 
    message: '‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    endpoints: {
      health: '/api/health',
      test: '/api/test',
      admin_login: 'POST /api/admin/login'
    },
    timestamp: new Date().toISOString()
  });
});

// Health check
app.get('/api/health', async (req, res) => {
  try {
    await pool.query('SELECT 1');
    res.json({ 
      status: 'OK', 
      database: 'connected',
      environment: process.env.NODE_ENV,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Health check error:', error.message);
    res.status(500).json({ 
      status: 'Error', 
      database: 'disconnected',
      error: error.message,
      environment: process.env.NODE_ENV
    });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/api/test', (req, res) => {
  res.json({
    message: 'Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    environment: process.env.NODE_ENV,
    timestamp: new Date().toISOString()
  });
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
app.post('/api/admin/login', async (req, res) => {
  try {
    const { full_name, password } = req.body;
    console.log('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∞:', full_name);

    // –ü–†–û–°–¢–û–ô –¢–ï–°–¢ - –í–ï–†–ù–ï–ú –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢ –ë–ï–ó –ü–†–û–í–ï–†–ö–ò –ë–î
    if (full_name === '–¢–µ—Å—Ç –∞–¥–º–∏–Ω' && password === '1357911Dan') {
      return res.json({
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)',
        token: 'admin-token-1',
        user: {
          id: 1,
          full_name: '–¢–µ—Å—Ç –∞–¥–º–∏–Ω',
          role: 'admin'
        }
      });
    }

    // –ï—Å–ª–∏ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–±—É–µ–º –ë–î
    const result = await pool.query(
      'SELECT * FROM admin WHERE full_name = $1',
      [full_name]
    );

    if (result.rows.length === 0) {
      return res.status(401).json({ error: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const admin = result.rows[0];
    
    if (password !== admin.password) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    const token = 'admin-token-' + admin.id;

    res.json({
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
      token,
      user: {
        id: admin.id,
        full_name: admin.full_name,
        role: 'admin'
      }
    });
  } catch (error) {
    console.error('Admin login error:', error);
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π JSON
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
app.post('/api/parent/login', async (req, res) => {
  try {
    const { full_name, password } = req.body;
    console.log('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Ä–æ–¥–∏—Ç–µ–ª—è:', full_name);

    // –ü–†–û–°–¢–û–ô –¢–ï–°–¢
    if (full_name === '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á' && password === '123') {
      return res.json({
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)',
        token: 'parent-token-1',
        user: {
          id: 1,
          full_name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
          role: 'parent'
        }
      });
    }

    const result = await pool.query(
      'SELECT * FROM parents WHERE full_name = $1',
      [full_name]
    );

    if (result.rows.length === 0) {
      return res.status(401).json({ error: '–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const parent = result.rows[0];
    
    if (password !== parent.password) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    const token = 'parent-token-' + parent.id;

    res.json({
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
      token,
      user: {
        id: parent.id,
        full_name: parent.full_name,
        role: 'parent'
      }
    });
  } catch (error) {
    console.error('Parent login error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ endpoints –ø–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
/*
app.get('/api/students', async (req, res) => {
  // ... –≤–∞—à –∫–æ–¥
});

app.get('/api/parent/students', async (req, res) => {
  // ... –≤–∞—à –∫–æ–¥  
});
*/

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log('='.repeat(50));
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üîó DATABASE_URL: ${process.env.DATABASE_URL ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
  console.log('='.repeat(50));
  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
  console.log('   –ê–¥–º–∏–Ω: –¢–µ—Å—Ç –∞–¥–º–∏–Ω / 1357911Dan');
  console.log('   –†–æ–¥–∏—Ç–µ–ª—å: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á / 123');
  console.log('='.repeat(50));
});