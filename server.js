import express from 'express';
import pkg from 'pg';
import cors from 'cors';
//–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞—â–∏—Ç—ã
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', __dirname);
console.log('üîç –ò—â–µ–º .env —Ñ–∞–π–ª...');

// –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π
const envPaths = [
  path.join(__dirname, '.env'),
  path.join(__dirname, 'backend', '.env'),
  '.env'
];

let envLoaded = false;
for (const envPath of envPaths) {
  try {
    const result = dotenv.config({ path: envPath });
    if (!result.error) {
      console.log(`‚úÖ .env –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑: ${envPath}`);
      envLoaded = true;
      break;
    }
  } catch (error) {
    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ ${envPath}:`, error.message);
  }
}

if (!envLoaded) {
  console.log('‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –ø—É—Ç–µ–π:', envPaths);
}

console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏:');
console.log('üìç NODE_ENV:', process.env.NODE_ENV);
console.log('üè† DB_HOST:', process.env.DB_HOST);
console.log('üìÅ DB_NAME:', process.env.DB_NAME);
console.log('üë§ DB_USER:', process.env.DB_USER);
console.log('üîê DB_PASSWORD:', process.env.DB_PASSWORD ? '***' : '–Ω–µ —É–∫–∞–∑–∞–Ω');


const { Pool } = pkg;
const app = express(); // ‚Üê –ü–ï–†–ï–ù–ï–°–ò –°–Æ–î–ê!

// ==================== MIDDLEWARE ====================

// –ó–∞—â–∏—Ç–∞ headers
app.use(helmet());

// –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100 // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
});
app.use(limiter);

// CORS —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
app.use(cors({
  origin: [
    'https://site-food-accounting-frontend.onrender.com',
    'http://localhost:3000'
  ],
  credentials: true
}));

app.use(express.json());

// ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('üìç NODE_ENV:', process.env.NODE_ENV);
console.log('üîó DATABASE_URL:', process.env.DATABASE_URL ? '–ï–°–¢–¨' : '–ù–ï–¢');
console.log('üè† DB_HOST:', process.env.DB_HOST || '–Ω–µ —É–∫–∞–∑–∞–Ω');
console.log('üìÅ DB_NAME:', process.env.DB_NAME || '–Ω–µ —É–∫–∞–∑–∞–Ω');
console.log('üë§ DB_USER:', process.env.DB_USER || '–Ω–µ —É–∫–∞–∑–∞–Ω');
console.log('üîê DB_PASSWORD:', process.env.DB_PASSWORD ? '***' : '–Ω–µ —É–∫–∞–∑–∞–Ω');

let poolConfig;

if (process.env.DATABASE_URL) {
  // –î–ª—è Render - –∏—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL —Å SSL
  poolConfig = {
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false
    }
  };
  console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL (Production)');
} else {
  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  poolConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false
  };
  console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î (Development)');
}

const pool = new Pool(poolConfig);

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function testDatabaseConnection() {
  let client;
  try {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...');
    client = await pool.connect();
    const result = await client.query('SELECT NOW() as current_time, version() as db_version');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –£–°–ü–ï–®–ù–û');
    console.log('‚è∞ –í—Ä–µ–º—è –ë–î:', result.rows[0].current_time);
    console.log('üìä –í–µ—Ä—Å–∏—è:', result.rows[0].db_version.split('\n')[0]);
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message);
    console.log('üîß –ö–æ–Ω—Ñ–∏–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', {
      host: poolConfig.host,
      database: poolConfig.database,
      user: poolConfig.user,
      port: poolConfig.port,
      hasPassword: !!poolConfig.password,
      hasSSL: !!poolConfig.ssl
    });
    return false;
  } finally {
    if (client) client.release();
  }
}

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
async function initializeDatabase() {
  let client;
  try {
    client = await pool.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    const tablesCheck = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      AND table_name IN ('admin', 'parents', 'students', 'payments')
    `);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tablesCheck.rows.length}`);
    
    if (tablesCheck.rows.length === 0) {
      console.log('üóÉÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...');
      
      await client.query(`
        CREATE TABLE admin (
          id SERIAL PRIMARY KEY,
          full_name VARCHAR(100) NOT NULL,
          password VARCHAR(100) NOT NULL
        )
      `);

      await client.query(`
        CREATE TABLE parents (
          id SERIAL PRIMARY KEY,
          full_name VARCHAR(100) NOT NULL,
          password VARCHAR(100) NOT NULL,
          parent_id INTEGER,
          usertype VARCHAR
        )
      `);

      await client.query(`
        CREATE TABLE students (
          id SERIAL PRIMARY KEY,
          full_name VARCHAR(100) NOT NULL,
          student_id INTEGER,
          balance REAL,
          parent_id INTEGER
        )
      `);

      await client.query(`
        CREATE TABLE payments (
          id SERIAL PRIMARY KEY,
          student_id INTEGER,
          payment_date DATE NOT NULL,
          amount NUMERIC(10,2) NOT NULL,
          description TEXT NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          created_by INTEGER
        )
      `);

      // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
      await client.query(`
        CREATE OR REPLACE FUNCTION get_student_balance(student_id integer, target_date date DEFAULT CURRENT_DATE)
        RETURNS numeric AS $$
        SELECT COALESCE(SUM(amount), 0)
        FROM payments 
        WHERE student_id = $1 AND payment_date <= $2;
        $$ LANGUAGE sql
      `);

      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
  } finally {
    if (client) client.release();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
setTimeout(async () => {
  const connected = await testDatabaseConnection();
  if (connected) {
    await initializeDatabase();
  }
}, 1000);

// ==================== ROUTES ====================

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –£–ë–ï–î–ò–¢–ï–°–¨ –ß–¢–û –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢
app.get('/', (req, res) => {
  res.json({ 
    message: '‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    endpoints: {
      health: '/api/health',
      test: '/api/test',
      admin_login: 'POST /api/admin/login'
    },
    timestamp: new Date().toISOString()
  });
});

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç route –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
app.get('/api/test-db', async (req, res) => {
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT NOW() as time');
    client.release();
    
    res.json({ 
      status: 'DB connected', 
      time: result.rows[0].time,
      config: {
        host: pool.options.host,
        database: pool.options.database,
        user: pool.options.user,
        port: pool.options.port
      }
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'DB connection failed', 
      error: error.message,
      config: {
        host: pool.options.host,
        database: pool.options.database,
        user: pool.options.user,
        port: pool.options.port
      }
    });
  }
});

// Health check
app.get('/api/health', async (req, res) => {
  try {
    await pool.query('SELECT 1');
    res.json({ 
      status: 'OK', 
      database: 'connected',
      environment: process.env.NODE_ENV,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Health check error:', error.message);
    res.status(500).json({ 
      status: 'Error', 
      database: 'disconnected',
      error: error.message,
      environment: process.env.NODE_ENV
    });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/api/test', (req, res) => {
  res.json({
    message: 'Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    environment: process.env.NODE_ENV,
    timestamp: new Date().toISOString()
  });
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
app.post('/api/admin/login', async (req, res) => {
  console.log('üîë ========== –ü–û–ü–´–¢–ö–ê –í–•–û–î–ê –ê–î–ú–ò–ù–ê ==========');
  
  try {
    console.log('üì® –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body));
    
    const { full_name, password } = req.body;
    
    if (!full_name || !password) {
      return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    console.log(`üîê –í—Ö–æ–¥: "${full_name}", –ü–∞—Ä–æ–ª—å: "${password}"`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ
    const result = await pool.query(
      'SELECT * FROM admin WHERE full_name = $1',
      [full_name.trim()]  // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    );

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.rows.length}`);
    
    if (result.rows.length > 0) {
      const admin = result.rows[0];
      console.log('üë§ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:', admin);
      console.log(`üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏: –≤–≤–µ–¥–µ–Ω "${password}" vs –≤ –ë–î "${admin.password}"`);
      
      if (password === admin.password) {
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π');
        return res.json({
          message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
          token: 'admin-token-' + admin.id,
          user: {
            id: admin.id,
            full_name: admin.full_name,
            role: 'admin'
          }
        });
      } else {
        console.log('‚ùå –ü–∞—Ä–æ–ª—å –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
      }
    } else {
      console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    });
  }
});

// –í—Ö–æ–¥ –ø–æ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
app.get('/api/student/login/:studentId', async (req, res) => {
  console.log('üîë ========== –ü–û–ü–´–¢–ö–ê –í–•–û–î–ê –ü–û ID –°–¢–£–î–ï–ù–¢–ê ==========');
  
  try {
    const studentId = req.params.studentId;
    console.log('üéØ –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å ID:', studentId);

    // –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ student_id
    const result = await pool.query(`
      SELECT s.*, p.full_name as parent_name,
      (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE student_id = s.id) as balance
      FROM students s 
      LEFT JOIN parents p ON s.parent_id = p.id 
      WHERE s.student_id = $1
    `, [studentId]);

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${result.rows.length}`);

    if (result.rows.length > 0) {
      const student = result.rows[0];
      console.log('‚úÖ –°—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', student.full_name);
      
      return res.json({
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
        user: {
          id: student.id,
          full_name: student.full_name,
          student_id: student.student_id,
          balance: student.balance,
          parent_name: student.parent_name,
          role: 'user'  // –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç —Ä–æ–ª—å 'user'
        },
        token: 'user-token-' + student.id
      });
    } else {
      console.log('‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(404).json({ error: '–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/api/students', async (req, res) => {
  try {
    const token = req.headers.authorization;
    console.log('üîê Token –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', token);
    
    if (!token || !token.includes('admin-token')) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    console.log('üìã –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...');
    
    const result = await pool.query(`
      SELECT s.*, p.full_name as parent_name,
      (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE student_id = s.id) as balance
      FROM students s 
      LEFT JOIN parents p ON s.parent_id = p.id 
      ORDER BY s.full_name
    `);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${result.rows.length}`);
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è
app.get('/api/parent/students', async (req, res) => {
  try {
    const token = req.headers.authorization;
    console.log('üîê Token –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è:', token);
    
    if (!token || !token.includes('parent-token')) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º parent_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ (parent-token-1 ‚Üí 1)
    const parentId = parseInt(token.split('-').pop());
    console.log(`üë®‚Äçüë¶ –ó–∞–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è ID: ${parentId}`);
    
    const result = await pool.query(`
      SELECT s.*,
      (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE student_id = s.id) as balance
      FROM students s 
      WHERE s.parent_id = $1
      ORDER BY s.full_name
    `, [parentId]);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É —Ä–æ–¥–∏—Ç–µ–ª—è: ${result.rows.length}`);
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
// –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
app.get('/api/students/:id/payments', async (req, res) => {
  try {
    const studentId = req.params.id;
    const token = req.headers.authorization;
    
    console.log(`üí∞ –ó–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–µ–∂–µ–π —Å—Ç—É–¥–µ–Ω—Ç–∞ ID: ${studentId}`);

    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if (!token) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    const result = await pool.query(
      'SELECT * FROM payments WHERE student_id = $1 ORDER BY payment_date DESC, created_at DESC',
      [studentId]
    );

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${result.rows.length}`);
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    res.status(500).json({ error: error.message });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
app.post('/api/payments', async (req, res) => {
  try {
    const token = req.headers.authorization;
    
    if (!token || !token.includes('admin-token')) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const { student_id, payment_date, amount, description } = req.body;
    
    console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', { student_id, amount, description });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º admin_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ (admin-token-1 ‚Üí 1)
    const adminId = parseInt(token.split('-').pop());

    const result = await pool.query(
      `INSERT INTO payments (student_id, payment_date, amount, description, created_by) 
       VALUES ($1, $2, $3, $4, $5) RETURNING *`,
      [student_id, payment_date, amount, description, adminId]
    );

    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω:', result.rows[0]);
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
app.get('/api/students/:id/balance', async (req, res) => {
  try {
    const studentId = req.params.id;
    const token = req.headers.authorization;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
    if (token && token.includes('parent-token')) {
      const parentId = parseInt(token.split('-').pop());
      const studentCheck = await pool.query(
        'SELECT * FROM students WHERE id = $1 AND parent_id = $2',
        [studentId, parentId]
      );
      
      if (studentCheck.rows.length === 0) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
      }
    }

    const result = await pool.query(
      'SELECT public.get_student_balance($1, CURRENT_DATE) as balance',
      [studentId]
    );

    res.json({ balance: parseFloat(result.rows[0].balance) });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
app.get('/api/debug/connection', async (req, res) => {
  try {
    const client = await pool.connect();
    const dbInfo = await client.query('SELECT NOW() as time, version() as version');
    
    const tables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `);
    
    client.release();
    
    res.json({
      status: 'connected',
      database_time: dbInfo.rows[0].time,
      version: dbInfo.rows[0].version.split('\n')[0],
      tables: tables.rows.map(t => t.table_name),
      environment: {
        node_env: process.env.NODE_ENV,
        has_database_url: !!process.env.DATABASE_URL,
        db_host: process.env.DB_HOST,
        db_name: process.env.DB_NAME
      }
    });
    
  } catch (error) {
    res.status(500).json({
      status: 'disconnected',
      error: error.message,
      environment: {
        node_env: process.env.NODE_ENV,
        has_database_url: !!process.env.DATABASE_URL,
        db_host: process.env.DB_HOST,
        db_name: process.env.DB_NAME
      }
    });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log('='.repeat(50));
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üîó DATABASE_URL: ${process.env.DATABASE_URL ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
  console.log('='.repeat(50));
});