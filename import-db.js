import { Pool } from 'pg';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ë–ï–ó SSL
const poolConfig = {
  host: 'localhost',
  port: 5432,
  database: 'food-accounting-db',
  user: 'postgres',
  password: 'Hashiramochka0', // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
  // SSL –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
};

const pool = new Pool(poolConfig);

async function importDump() {
  const client = await pool.connect();
  
  try {
    console.log('üì• –ò–º–ø–æ—Ä—Ç –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlPath = path.join(__dirname, 'dump-food-accounting-db-202510110434.sql');
    const sql = fs.readFileSync(sqlPath, 'utf8');
    
    console.log('üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', sql.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const cleanSql = sql
      .replace(/\\restrict.*?\n/, '')
      .replace(/\\unrestrict.*?\n/, '');
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const queries = cleanSql
      .split(';')
      .filter(query => query.trim().length > 10) // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
      .map(query => query.trim() + ';');
    
    console.log('üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤:', queries.length);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
    for (let i = 0; i < queries.length; i++) {
      const query = queries[i];
      if (query && !query.includes('pg_catalog.setval')) { // –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º sequence
        try {
          await client.query(query);
          console.log(`‚úÖ [${i+1}/${queries.length}] –í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å`);
        } catch (error) {
          console.log(`‚ö†Ô∏è [${i+1}/${queries.length}] –ü—Ä–æ–ø—É—â–µ–Ω:`, error.message);
        }
      }
    }
    
    console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

importDump();